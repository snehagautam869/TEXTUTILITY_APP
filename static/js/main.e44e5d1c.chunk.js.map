{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","Link","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","togglemode","role","htmlFor","Textform","_useState","useState","_useState2","_slicedToArray","text","settext","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newtext","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","defaultProps","aboutText","Alert","height","alert","word","lower","charAt","slice","capitalize","msg","About","mystyle","data-bs-parent","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","Router","cls","document","body","Routes","Route","exact","path","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e44e5d1c.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar (props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link \" aria-current=\"page\" to=\"/\">Home</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n        </li>\r\n      </ul>\r\n      {/* <form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"></input>\r\n        <buthrefn className=\"btn btn-outline-primary\" type=\"submit\">Search</buthrefn>\r\n      </form> */}\r\n      {/* <div className=\"d-flex\">\r\n        <div className=\"bg-primary rounded mx-2\" onClick={()=>{props.togglemode('primary')}} style={{height:'30px',width:'30px',cursor:'pointer'}}></div>\r\n        <div className=\"bg-danger rounded mx-2\" onClick={()=>{props.togglemode('danger')}} style={{height:'30px',width:'30px',cursor:'pointer'}}></div>\r\n        <div className=\"bg-success rounded mx-2\" onClick={()=>{props.togglemode('success')}} style={{height:'30px',width:'30px',cursor:'pointer'}}></div>\r\n        <div className=\"bg-warning rounded mx-2\" onClick={()=>{props.togglemode('warning')}} style={{height:'30px',width:'30px',cursor:'pointer'}}></div>\r\n      </div> */}\r\n      <div className={`form-check form-switch mx-3 text-${props.mode==='light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input\" onClick={()=>{props.togglemode('null')}} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n  )\r\n}\r\nNavbar.propTypes = {title : PropTypes.string.isRequired,\r\n                    aboutText : PropTypes.string.isRequired}\r\nNavbar.defaultProps ={title:\"set title here\",aboutText:\"About Us\"}\r\n\r\n","import React, {useState} from 'react'\r\n\r\nexport default function Textform(props) {\r\n  const[text,settext] = useState('');\r\n  const handleUpClick =()=>\r\n  {\r\n    // console.log(\"Uppercase Clicked\" + text)\r\n    let newtext= text.toUpperCase();\r\n    settext(newtext);\r\n    props.showAlert(\"Converted to UpperCase!\",\"success\");\r\n  }\r\n  const handleonchange =(event)=>\r\n  {\r\n    // console.log(\"On Changed!\")\r\n    settext(event.target.value);\r\n  }\r\n  const handlelowClick =()=>\r\n  {\r\n    let newtext = text.toLowerCase();\r\n    settext(newtext);\r\n    props.showAlert(\"Converted to LowerCase!\",\"success\");\r\n  }\r\n  const handlelclearClick=()=>\r\n  {\r\n    let newtext = ('');\r\n    settext(newtext);\r\n    props.showAlert(\"Text Cleared!\",\r\n    \"success\");\r\n  }\r\n  const handlelcopyClick=()=>\r\n  {\r\n    // console.log(\"I am copy\");\r\n    navigator.clipboard.writeText(text);\r\n    props.showAlert(\"Copied to ClipBoard!\",\"success\");\r\n  }\r\n  const handlextraspaces=()=>\r\n  {\r\n    let newtext = text.split(/[ ]+/);\r\n    settext(newtext.join(\" \"))\r\n    props.showAlert(\"Removed Extra Spaces!\",\"success\");\r\n  }\r\n  \r\n  //settext(\"New Text\");//correct way to change the state\r\n  //text = \"new text\";// wrong way to change state\r\n  return (\r\n   <>\r\n    <div className=\"container\" style={{color:props.mode === 'dark'?'white':'#042743'}}>\r\n      <h1 className='mb-4'>{props.heading}</h1>\r\n      <div className='mb-3'>\r\n        <textarea className=\"form-control\" value={text} onChange={handleonchange} style={{backgroundColor:props.mode === 'dark'?'#13466e':'white',color:props.mode === 'dark'?'white':'black'}}  id=\"textbox\" rows=\"8\"></textarea>\r\n      </div>\r\n      <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\"  onClick={handleUpClick}>Convert to Uppercase</button>\r\n      <button disabled={text.length===0} className=\"btn btn-secondary mx-1 my-1\" onClick={handlelowClick}>Convert to LowerCase</button>\r\n      <button disabled={text.length===0} className=\"btn btn-danger mx-1 my-1\" onClick={handlelclearClick}>Clear Text</button>\r\n      <button disabled={text.length===0} className=\"btn btn-warning mx-1 my-1\" onClick={handlelcopyClick}>Copy Text</button>\r\n      <button disabled={text.length===0} className=\"btn btn-info mx-1 my-1\" onClick={handlextraspaces}>Remove Extra Spaces</button>\r\n    </div>\r\n    <div className=\"container my-3\"  style={{color:props.mode === 'dark'?'white':'#042743'}}>\r\n      <h2>Your text summary</h2>\r\n      <p>{text.split(/\\s+/).filter((element)=> // (/\\s+/)=> it means that wide space with new lines one or more than one ,it is a regular expression syntax\r\n      {\r\n        return element.length!==0\r\n      }).length} words and {text.length} characters </p>\r\n      <p>{0.008 * text.split(\" \").filter((element)=>\r\n      {\r\n        return element.length!==0\r\n      }).length} Minutes read</p>\r\n      <h2>Preview</h2>\r\n      <p>{text.length>0 ? text : \"Nothing to preview!\"}</p>\r\n    </div>\r\n   </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  const capitalize =(word)=>\r\n  {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  return (\r\n    <div style={{height: '50px'}}>\r\n    {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`}role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n    </div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","// import React, { useState } from 'react'\r\nimport React from \"react\"\r\nexport default function About(props) {\r\n    let mystyle ={\r\n        color: props.mode ==='dark'?'white':'#042743',\r\n        backgroundColor: props.mode === 'dark'?'rgb(36 74 104':'white',\r\n    }\r\n    // const[mystyle,setstyle] =useState(\r\n    //     {\r\n    //         color: 'black',\r\n    //         backgroundColor : 'white'\r\n    //     }\r\n    // )\r\n    // const[btntext,settext]=useState('Enable Dark Mode')\r\n    // const togglestyle =()=>\r\n    // {\r\n    //     if(mystyle.color==='black')\r\n    //     {\r\n    //         setstyle(\r\n    //             {\r\n    //                 color:'white',\r\n    //                 backgroundColor:'black',\r\n    //                 border:'2px solid white'\r\n    //             }\r\n    //         )\r\n    //         settext('Enable Light Mode')\r\n    //     }\r\n    //     else{\r\n    //         setstyle(\r\n    //             {\r\n    //                 color:'black',\r\n    //                 backgroundColor:'white'\r\n    //             }\r\n    //         )\r\n    //         settext('Enable Dark Mode')\r\n    //     }\r\n    // }\r\n  return (\r\n    <div className=\"container\" >\r\n        <h1 className='my-3'style={{color: props.mode ==='dark'?'white':'#042743'}}>ABOUT US </h1>\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\">\r\n            <button className=\"accordion-button\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n            Tap Here:-\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={mystyle}>\r\n                <strong>Analyze Your Text:-</strong><br />TextUtilis gives you a way to analyze your text quickly and efficiently.Be it word count,character count or <br /><br />\r\n                <strong>Free to Use:-</strong><br />\r\n                TextUtilis is a free character counter tool that provides instant character count & word count statistics for a given text.TextUtilis reports the number of words and chracters .Thus it is suitable for writing text with word/charcter limits. <br /><br />\r\n                <strong>Browser Compatible</strong><br />\r\n                This word counter software works in any web browsers such as chrome, firefox, Internet Explorer , Safari ,Opera.It suits to count chracters in facebook, blog ,books, excel document, pdf document ,essays,etc.\r\n            </div>\r\n            </div>\r\n        </div>\r\n          {/* <button onClick={togglestyle} type='button' className='btn btn-outline-dark my-3'>{btntext}</button> */}\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport './App.css';\nimport { useState } from 'react';\nimport Alert from './components/Alert';\nimport About from './components/About';\nimport { BrowserRouter as Router, Route, Routes  } from 'react-router-dom';\n/* Project 1 -- text utilities -- no of words,extrs space remove,capitilize,lower to upper etc i.e one text box where you upload your text  */\nfunction App() {\n  const[mode,setMode]=useState('light');//method tell wheater dark mode is enabled or not\n  const[alert,setAlert]=useState(null);\n\n  const showAlert =(message, type)=>\n  {\n    setAlert(\n      {\n        msg:message,\n        type:type\n      }\n    )\n    setTimeout(()=>\n    {\n      setAlert(null);\n    },1500)\n  }\n\n  // const removeBodyClasses=()=>{\n  //   document.body.classList.remove('bg-light')\n  //   document.body.classList.remove('bg-dark')\n  //   document.body.classList.remove('bg-warning')\n  //   document.body.classList.remove('bg-success')\n  //   document.body.classList.remove('bg-danger')\n  // }\n\n  const togglemode=(cls)=>\n  {\n    // removeBodyClasses(); \n    // document.body.classList.add('bg-'+cls)\n    if(mode === 'light')\n    {\n    setMode('dark');\n    document.body.style.backgroundColor ='#042743';\n    showAlert(\"Dark Mode has been Enabled\", \"success\");\n    // document.title = 'TextUtilis - Dark Mode';\n    // to attract user mind things but it not a good experience for user\n    // setInterval(()=>\n    // {\n    //   document.title = 'TextUtilis Is Amazing Mode'\n    // },2000);\n    // setInterval(()=>\n    // {1\n    //   document.title = 'Install TextUtilis Now'\n    // },1500);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor =\"white\";\n      showAlert(\"Light Mode has been Enabled\",\"success\");\n      // document.title = 'TextUtilis - Light Mode';\n    }\n  }\n  return (\n    <>\n    {/* // /users -- comp 1\n    // /users/home-comp 2  // it call comp 1 exact path reason  */}\n    <Router>\n      <Navbar title=\"TextUtilis\" mode={mode} togglemode={togglemode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\" >\n        <Routes>\n          <Route exact path=\"/about\" element={<About mode={mode}/>}/>\n          <Route exact path=\"/\" element={<Textform showAlert={showAlert}heading=\" Try TextUtilis - Word Counter, Character counter ,Remove Extra Spaces\" mode={mode}/>}/>\n          </Routes>\n      </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n//  {/* <Textform showAlert={showAlert}heading=\"Enter the text to Analyze below\" mode={mode}/> */}\n//         {/* <About/> */}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}